diff --git a/mesonbuild/backend/backends.py b/mesonbuild/backend/backends.py
index 0e7e8e0f..c3d068f4 100644
--- a/mesonbuild/backend/backends.py
+++ b/mesonbuild/backend/backends.py
@@ -368,9 +368,12 @@

     def rpaths_for_bundled_shared_libraries(self, target, exclude_system=True):
         paths = []
+        print('////////////////////////////////', target.external_deps)
         for dep in target.external_deps:
+            print('++++++++++++++++++++++++++', dep, isinstance(dep, (dependencies.ExternalLibrary, dependencies.PkgConfigDependency)))
             if not isinstance(dep, (dependencies.ExternalLibrary, dependencies.PkgConfigDependency)):
                 continue
             la = dep.link_args
+            print('-----------------', la)
             if len(la) != 1 or not os.path.isabs(la[0]):
                 continue
diff --git a/mesonbuild/compilers/compilers.py b/mesonbuild/compilers/compilers.py
index 337b2215..8264984a 100644
--- a/mesonbuild/compilers/compilers.py
+++ b/mesonbuild/compilers/compilers.py
@@ -1103,6 +1103,7 @@
         return args

     def build_unix_rpath_args(self, build_dir, from_dir, rpath_paths, build_rpath, install_rpath):
+        print("*********************", build_dir, from_dir, rpath_paths, build_rpath, install_rpath)
         if not rpath_paths and not install_rpath and not build_rpath:
             return []
         # The rpaths we write must be relative, because otherwise
diff --git a/mesonbuild/scripts/depfixer.py b/mesonbuild/scripts/depfixer.py
index b5f08fe1..c64def3d 100644
--- a/mesonbuild/scripts/depfixer.py
+++ b/mesonbuild/scripts/depfixer.py
@@ -309,6 +309,8 @@

         new_rpath += b':'.join(filter(lambda path: path.startswith(b'/nix/store'), old_rpath.split(b':')))

+        print('%%%%%%%%%%%%%%%%%%%%%%%%', new_rpath, old_rpath)
+
         if len(old_rpath) < len(new_rpath):
             sys.exit("New rpath must not be longer than the old one.")
         # The linker does read-only string deduplication. If there is a
